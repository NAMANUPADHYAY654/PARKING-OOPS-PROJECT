#include <iostream>
#include <conio.h>
#include <stdlib.h>
#include <fstream>
#include <string>
#include <vector>
using namespace std;

const int MAX_CAPACITY = 100;
int parkedCarsCount = 0;

class login {
public:
    int loginsys();
    string pass = "admin"; // Admin password
    string userpass = "user"; // User password
    string role; // To store the login role
    string username; // Store the username for user login
};

typedef struct car {
    string drivername;
    string carname;
    string carid;
    int timestay;
    string slot;
} car;

vector<string> availableSlots;

void initializeSlots() {
    for (int i = 1; i <= MAX_CAPACITY; i++) {
        char slotLetter = 'A' + (i - 1) / 10;
        int slotNumber = (i - 1) % 10 + 1;
        availableSlots.push_back(slotLetter + to_string(slotNumber));
    }
}

int login::loginsys() {
    while (1) {
        string password;
        string user;
        string roleChoice;
        cout << "\n\n\n\n\t\t\t\t---------->  CAR PARKING MANAGEMENT SYSTEM  <----------" << endl;
        char ch;
        cout << "\n\n\n\t\t\t\t\t  Car Parking Reservation System Login";
        
        cout << "\n\n\n\n\t\t\t\t\t   Choose Role (Admin/User): ";
        cin >> roleChoice;
        if (roleChoice == "Admin" || roleChoice == "admin") {
            cout << "\n\n\n\t\t\t\t\t  Enter Admin Password: ";
            cin >> password;
            if (password == pass) {
                cout << "\n\n\n\t\t\t\t\t  Access Granted! Welcome to Admin System\n\n";
                role = "Admin";
                system("PAUSE");
                break;
            } else {
                cout << "\n\n\n\t\t\t\t\t  Incorrect Admin Password! Try again.\n";
                system("PAUSE");
                system("CLS");
            }
        }
        else if (roleChoice == "User" || roleChoice == "user") {
            cout << "\n\n\n\t\t\t\t\t   Enter Username: ";
            cin >> username;
            cout << "\n\n\n\t\t\t\t\t   Enter Password: ";
            cin >> password;
            if (password == userpass) {
                cout << "\n\n\n\t\t\t\t\t  Access Granted! Welcome to User System\n\n";
                role = "User";
                system("PAUSE");
                break;
            } else {
                cout << "\n\n\n\t\t\t\t\t  Incorrect Password! Try again.\n";
                system("PAUSE");
                system("CLS");
            }
        } else {
            cout << "\n\n\n\t\t\t\t\t  Invalid role! Please choose either 'Admin' or 'User'.\n";
            system("PAUSE");
            system("CLS");
        }
    }
    return 1;
}

class ParkingManagement {
public:
    void park();
    void cardetail();
    void addexpensedb(car* CAR, int count);
    void expense();
    void removecar();
    void userremovecar(); // User remove car function
    void displayParkingMap();  // Admin: Shows full parking map
    void userParkingMap();  // User: Shows available parking slots with 'X' for occupied
};

void ParkingManagement::park() {
    if (parkedCarsCount >= MAX_CAPACITY) {
        cout << "Parking is full. No slots available.\n";
        cout << "Press Enter Key To Return\n";
        getch();
        return;
    }

    ofstream out;
    car CAR;
    out.open("carparkdb.txt", ios::app);

    cout << "---------------------------------------------------";
    cout << "---------------------------------------------------" << endl;
    cout << "Enter Your Name : ";
    getchar();
    getline(cin, CAR.drivername);

    cout << "---------------------------------------------------";
    cout << "---------------------------------------------------" << endl;
    cout << "Enter Your CarName : ";
    getline(cin, CAR.carname);

    cout << "---------------------------------------------------";
    cout << "---------------------------------------------------" << endl;
    cout << "Enter Your Car Number Plate (Unique Alphabet Sequence) : ";
    cin >> CAR.carid;

    cout << "---------------------------------------------------";
    cout << "---------------------------------------------------" << endl;
    cout << "Enter Your Time Stay In Hours (Integer Only) : ";
    cin >> CAR.timestay;

    // Assign slot
    CAR.slot = availableSlots[parkedCarsCount];
    cout << "---------------------------------------------------";
    cout << "---------------------------------------------------" << endl;
    cout << "Your Car Is Parked At Slot: " << CAR.slot << endl;

    out << "Car Name : " << CAR.carname
        << ", Car Id : " << CAR.carid << "\n"
        << "Driver Name : " << CAR.drivername
        << ", Car Time Stay : " << CAR.timestay
        << " hours, Slot: " << CAR.slot << "\n";

    addexpensedb(&CAR, parkedCarsCount);
    parkedCarsCount++;
    out.close();
    cout << "Your Car Is Parked Now!\n";
    cout << "Press Enter Key To Return\n";
    getch();
}

void ParkingManagement::cardetail() {
    system("CLS");
    int i = 0;
    string detailid;
    string line;
    ifstream in;
    cout << "                        -------------> Your Car Details <-------------" << endl << endl;
    cout << "---------------------------------------------------";
    cout << "---------------------------------------------------" << endl;
    cout << "Enter Your CarID : ";
    getchar();
    getline(cin, detailid);
    cout << "---------------------------------------------------";
    cout << "---------------------------------------------------" << endl;

    in.open("carparkdb.txt");
    while (getline(in, line)) {
        size_t found = line.find(detailid);
        if (found != string::npos) {
            cout << "Your Car Details Are : \n";
            cout << line;
            getline(in, line);
            cout << endl << line << endl;
            getch();
            in.close();
            i++;
            break;
        }
    }

    in.close();

    if (i == 0) {
        cout << "Car With CarID " << detailid << " Not Found\n";
        cout << "TRY AGAIN! (Use Correct CarID)\n";
        getch();
    }
}

void ParkingManagement::addexpensedb(car* CAR, int count) {
    ofstream out;
    out.open("carparkexpensedb.txt", ios::app);

    out << "Car ID : " << CAR->carid
        << ", Car Name : " << CAR->carname << "\n"
        << "Driver Name : " << CAR->drivername
        << ", Car Time Stay : " << CAR->timestay
        << " hours, Total Expense : " << CAR->timestay * 100
        << " Rupees, Slot: " << CAR->slot << "\n";

    out.close();
}

void ParkingManagement::expense() {
    system("CLS");
    string cexpenseid, line;
    int i = 0;
    cout << "Enter Your Car Id : ";
    cin >> cexpenseid;

    ifstream in;
    in.open("carparkexpensedb.txt");
    while (getline(in, line)) {
        size_t found = line.find(cexpenseid);
        if (found != string::npos) {
            cout << "Your Car Parking Expense Details Are : " << endl;
            cout << line;
            getline(in, line);
            cout << endl << line << endl;
            getch();
            in.close();
            i++;
            break;
        }
    }

    in.close();

    if (i == 0) {
        cout << "Car With CarID " << cexpenseid << " Not Found" << endl;
        getch();
    }
}

void ParkingManagement::removecar() {
    system("CLS");
    string rcarid, line;
    cout << "Enter Your Car Id : ";
    cin >> rcarid;

    ifstream in("carparkdb.txt");
    ofstream out("temp.txt", ios::app);
    while (getline(in, line)) {
        if (line.find(rcarid) == string::npos) {
            out << line << endl;
        }
    }
    in.close();
    out.close();

    remove("carparkdb.txt");
    rename("temp.txt", "carparkdb.txt");

    ifstream expenseIn("carparkexpensedb.txt");
    ofstream expenseOut("tempexpense.txt", ios::app);
    while (getline(expenseIn, line)) {
        if (line.find(rcarid) == string::npos) {
            expenseOut << line << endl;
        }
    }
    expenseIn.close();
    expenseOut.close();

    remove("carparkexpensedb.txt");
    rename("tempexpense.txt", "carparkexpensedb.txt");

    cout << "Car Removed Successfully!\n";
    parkedCarsCount--;
    getch();
}

void ParkingManagement::userremovecar() {
    system("CLS");
    string rcarid, line;
    cout << "Enter Your Car Id : ";
    cin >> rcarid;

    ifstream in("carparkdb.txt");
    ofstream out("temp.txt", ios::app);
    while (getline(in, line)) {
        if (line.find(rcarid) == string::npos) {
            out << line << endl;
        }
    }
    in.close();
    out.close();

    remove("carparkdb.txt");
    rename("temp.txt", "carparkdb.txt");

    ifstream expenseIn("carparkexpensedb.txt");
    ofstream expenseOut("tempexpense.txt", ios::app);
    while (getline(expenseIn, line)) {
        if (line.find(rcarid) == string::npos) {
            expenseOut << line << endl;
        }
    }
    expenseIn.close();
    expenseOut.close();

    remove("carparkexpensedb.txt");
    rename("tempexpense.txt", "carparkexpensedb.txt");

    cout << "Your Car Removed Successfully!\n";
    parkedCarsCount--;
    getch();
}

void ParkingManagement::displayParkingMap() {
    system("CLS");
    cout << "Admin View: Displaying All Parking Slots\n";
    cout << "------------------------------------------------------------\n";

    // Show parking slots, with occupied ones marked as 'X'
    for (int i = 0; i < MAX_CAPACITY; i++) {
        if (i < parkedCarsCount) {
            cout << "[ X ] ";  // 'X' indicates occupied slot
        } else {
            cout << "[ " << availableSlots[i] << " ] ";  // Show available slot
        }

        // After every 10 slots, print a newline to format the parking map
        if ((i + 1) % 10 == 0) {
            cout << endl;
        }
    }

    cout << "\nPress Enter to Continue.\n";
    getch();
}

void ParkingManagement::userParkingMap() {
    system("CLS");
    cout << "User View: Displaying Available and Occupied Parking Slots\n";
    cout << "------------------------------------------------------------\n";

    // Show all slots, with occupied ones marked as 'X' (no removal of occupied slots)
    for (int i = 0; i < MAX_CAPACITY; i++) {
        if (i < parkedCarsCount) {
            cout << "[ X ] ";  // 'X' indicates occupied slot
        } else {
            cout << "[ " << availableSlots[i] << " ] ";  // Show available slot
        }

        // After every 10 slots, print a newline to format the parking map
        if ((i + 1) % 10 == 0) {
            cout << endl;
        }
    }

    cout << "\nPress Enter to Continue.\n";
    getch();
}

int main() {
    login obj1;
    obj1.loginsys();

    ParkingManagement pm;
    initializeSlots();

    if (obj1.role == "Admin") {
        int choice;
        do {
            system("CLS");
            cout << "----------- Admin Menu -----------\n";
            cout << "1. Park Car\n";
            cout << "2. View Car Details\n";
            cout << "3. Check Parking Expenses\n";
            cout << "4. Remove Car\n";
            cout << "5. Display Parking Map\n";
            cout << "6. Logout\n";
            cout << "Enter choice: ";
            cin >> choice;

            switch (choice) {
                case 1:
                    pm.park();
                    break;
                case 2:
                    pm.cardetail();
                    break;
                case 3:
                    pm.expense();
                    break;
                case 4:
                    pm.removecar();
                    break;
                case 5:
                    pm.displayParkingMap();
                    break;
                case 6:
                    cout << "Logging out...\n";
                    break;
                default:
                    cout << "Invalid choice. Try again.\n";
                    break;
            }
        } while (choice != 6);
    }
    else if (obj1.role == "User") {
        int choice;
        do {
            system("CLS");
            cout << "----------- User Menu -----------\n";
            cout << "1. Park Car\n";
            cout << "2. View Your Car Details\n";
            cout << "3. Check Your Parking Expenses\n";
            cout << "4. View Available Parking Slots\n";
            cout << "5. Remove Your Car\n";  // Option to remove car
            cout << "6. Logout\n";
            cout << "Enter choice: ";
            cin >> choice;

            switch (choice) {
                case 1:
                    pm.park();
                    break;
                case 2:
                    pm.cardetail();
                    break;
                case 3:
                    pm.expense();
                    break;
                case 4:
                    pm.userParkingMap();
                    break;
                case 5:
                    pm.userremovecar();  // Remove car functionality for users
                    break;
                case 6:
                    cout << "Logging out...\n";
                    break;
                default:
                    cout << "Invalid choice. Try again.\n";
                    break;
            }
        } while (choice != 6);
    }
    return 0;
}
